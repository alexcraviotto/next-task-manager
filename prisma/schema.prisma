generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id         Int     @id @default(autoincrement())
  username   String  @unique
  email      String  @unique
  password   String
  isAdmin    Boolean @default(false)
  isVerified Boolean @default(false)
  isActive   Boolean @default(true)

  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  tasks            Task[]             @relation("UserTasks")
  taskRatings      TaskRating[]
  otps             OTP[] // New relation to OTP model
  createdOrgs      Organization[]     @relation("CreatedByUser") // Nueva relación
  UserOrganization UserOrganization[]
}

model Organization {
  id          String             @id @default(uuid())
  name        String             @unique
  createdById Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  users       UserOrganization[] @relation("OrganizationToUserOrganization")
  tasks       Task[]             @relation("OrganizationToTask")
  versions    Version[]          @relation("OrganizationToVersion")
  createdBy   User               @relation("CreatedByUser", fields: [createdById], references: [id]) // Nueva relación
}

model UserOrganization {
  userId         Int
  organizationId String // Cambiado a String
  weight         Int // Peso del cliente dado por el admin
  User           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation("OrganizationToUserOrganization", fields: [organizationId], references: [id], onDelete: Cascade)

  @@id([userId, organizationId])
}

model Task {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  type           String
  startDate      DateTime
  endDate        DateTime
  progress       Float
  organizationId String // Cambiado a String
  createdById    Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization  @relation("OrganizationToTask", fields: [organizationId], references: [id], onDelete: Cascade)
  createdBy    User          @relation("UserTasks", fields: [createdById], references: [id])
  taskRatings  TaskRating[]
  versionTasks VersionTask[]

  dependencies Task[] @relation("TaskDependencies")
  dependentOn  Task[] @relation("TaskDependencies")
}

model VersionTask {
  versionId Int
  taskId    Int
  Version   Version @relation(fields: [versionId], references: [id], onDelete: Cascade)
  Task      Task    @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([versionId, taskId])
}

model TaskRating {
  id                 Int  @id @default(autoincrement())
  taskId             Int
  userId             Int
  clientSatisfaction Int? @default(0) @map("client_satisfaction")
  clientWeight       Int? @default(0) @map("client_weight")
  effort             Int? @default(0)
  task               Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user               User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
}

model Version {
  id             Int           @id @default(autoincrement())
  organizationId String
  versionName    String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation("OrganizationToVersion", fields: [organizationId], references: [id], onDelete: Cascade)
  versionTasks   VersionTask[]
}

model OTP {
  id        Int      @id @default(autoincrement())
  code      String
  email     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  isUsed    Boolean  @default(false)
  userId    Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([email, isUsed, expiresAt]) // Índice compuesto para búsquedas eficientes
  @@index([code, isUsed]) // Para validaciones rápidas de código
}
