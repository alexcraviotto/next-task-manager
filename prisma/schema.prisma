generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

// Modelo users
model User {
  id         Int     @id @default(autoincrement())
  username   String  @unique
  email      String  @unique
  password   String
  isAdmin    Boolean @default(false)
  isVerified Boolean @default(false)

  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  organizations UserOrganization[] // Relación hacia UserOrganization
  tasks         Task[]             @relation("UserTasks")
  taskRatings   TaskRating[]
}

// Modelo organizations
model Organization {
  id          Int                @id @default(autoincrement())
  name        String             @unique
  createdById Int
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  users       UserOrganization[]
  tasks       Task[]             @relation("OrganizationTasks")
  versions    Version[]          @relation("OrganizationVersions")
}

// Tabla de relación user_organizations
model UserOrganization {
  userId         Int
  organizationId Int
  weight         Int // Peso del cliente dado por el admin
  User           User         @relation(fields: [userId], references: [id])
  Organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId])
}

// Modelo tasks
model Task {
  id             Int      @id @default(autoincrement())
  name           String
  description    String?
  type           String
  startDate      DateTime
  endDate        DateTime
  progress       Float
  organizationId Int
  createdById    Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  organization Organization  @relation("OrganizationTasks", fields: [organizationId], references: [id])
  createdBy    User          @relation("UserTasks", fields: [createdById], references: [id])
  taskRatings  TaskRating[]
  versionTasks VersionTask[]

  dependencies Task[] @relation("TaskDependencies")
  dependentOn  Task[] @relation("TaskDependencies")
}

// Tabla de relación version_tasks
model VersionTask {
  versionId Int
  taskId    Int
  Version   Version @relation(fields: [versionId], references: [id])
  Task      Task    @relation(fields: [taskId], references: [id])

  @@id([versionId, taskId])
}

// Modelo task_ratings con restricciones
model TaskRating {
  id                 Int  @id @default(autoincrement())
  taskId             Int
  userId             Int
  clientSatisfaction Int? @default(0) @map("client_satisfaction")
  clientWeight       Int? @default(0) @map("client_weight")
  effort             Int? @default(0)
  task               Task @relation(fields: [taskId], references: [id])
  user               User @relation(fields: [userId], references: [id])

  @@unique([taskId, userId])
}

// Modelo versions
model Version {
  id             Int           @id @default(autoincrement())
  organizationId Int
  versionNumber  Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organization   Organization  @relation("OrganizationVersions", fields: [organizationId], references: [id])
  versionTasks   VersionTask[]
}
